<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.dreamstart.mapper.BoardMapper">

	<resultMap type="BoardPostDTO" id="boardPostMap">
		<id column="post_id" property="postId" />
		<result column="category" property="category" />
		<result column="title" property="title" />
		<result column="content" property="content" />
		<result column="user_id" property="userId" />
		<result column="is_pinned" property="isPinned" />
		<result column="visibility" property="visibility" />
		<result column="view_count" property="viewCount" />
		<result column="created_at" property="createdAt" />
		<result column="updated_at" property="updatedAt" />
		<result column="published_at" property="publishedAt" />
		<result column="comment_count" property="commentCount" />
	</resultMap>

	<resultMap type="BoardCommentDTO" id="boardCommentMap">
		<id column="comment_id" property="commentId" />
		<result column="post_id" property="postId" />
		<result column="user_id" property="userId" />
		<result column="content" property="content" />
		<result column="parent_id" property="parentId" />
		<result column="created_at" property="createdAt" />
	</resultMap>

	<select id="postCount" resultType="int">
		select count(*) from
		`board_post` where `category` = #{category} AND `visibility` =
		'PUBLIC'
	</select>

	<!-- 서브쿼리로 게시물당 댓글 개수를 매칭해서 가져옴 -->
	<select id="noticeList" resultMap="boardPostMap">
		select p.*,(SELECT COUNT(*)
		FROM board_comment c WHERE c.post_id = p.post_id) AS comment_count
		from `board_post` p
		where `category` = 'NOTICE' and `visibility` =
		'PUBLIC'
		order by
		`post_id` DESC
		limit
		#{cri.pageStart},#{cri.perPageNum}
	</select>

	<select id="qnaList" resultMap="boardPostMap">
		select * from `board_post`
		where
		`category` = 'QNA'
		order by
		`post_id` DESC
		limit
		#{cri.pageStart},#{cri.perPageNum}
	</select>

	<insert id="postInsert" useGeneratedKeys="true"
		keyProperty="postId">
		insert into `board_post`
		(`category`,`title`,`content`,`user_id`,`visibility`,`created_at`)
		values
		(#{category},#{title},#{content},#{userId},#{visibility},now())
	</insert>

	<update id="postUpdate">
		update `board_post` set <!-- `category`= #{postDTO.category}, -->
		`title`=#{postDTO.title},`content`=#{postDTO.content},
		<!-- `visibility`= #{visibility}, -->
		`updated_at`
		= now() where `post_id` = #{postDTO.postId}
	</update>

	<select id="select" resultMap="boardPostMap">
		select * from `board_post` where
		`post_Id` = #{postId}
	</select>
	<select id="selectPrev" resultMap="boardPostMap">
		select * from `board_post` where `category`=#{category} and
		`post_Id` <![CDATA[<]]>
		#{postId} order by `post_Id` desc limit 1
	</select>
	<select id="selectNext" resultMap="boardPostMap">
		select * from `board_post` where `category`=#{category} and
		`post_Id` <![CDATA[>]]>
		#{postId} order by `post_Id` asc limit 1
	</select>

	<update id="toPrivate">
		update `board_post` set `visibility` = 'PRIVATE'
		,`updated_at` = now() where `post_id` =
		#{postId}
	</update>

	<update id="toPublic">
		update `board_post` set `visibility` = 'PUBLIC'
		,`updated_at` = now() ,`published_at` = now() where `post_id` =
		#{postId}
	</update>

	<select id="viewCount" resultType="int">
		select `view_count` from
		`board_post` where `post_id`
		= #{postId}
	</select>

	<update id="viewCountPlus" parameterType="long">
		update `board_post` set
		`view_count` = `view_count`+1 where `post_id` =
		#{postId}
	</update>

	<select id="postSearch" resultMap="boardPostMap">
		select * from `board_post`
		<where>
			`category` = #{category}
			<if test="searchType == 'title'">
				and `title` like concat('%', #{keyword}, '%') </if>
			<if test="searchType == 'content'"> and `content` like concat('%', #{keyword}, '%')
			</if>
			<if test="searchType == 'all'"> and ( `content` like concat('%',
				#{keyword}, '%') or
				`title` like concat('%', #{keyword}, '%') ) </if>
		</where>
	</select>
	<!-- searchType 필요 없을 시 (ALL) -->
	<!-- <select id="postSearch" resultMap="boardPostMap"> select * from `board_post` 
		WHERE `category` = #{category} and ( `content` like concat('%', #{keyword}, 
		'%') or `title` like concat('%', #{keyword}, '%') ) </select> -->


	<select id="commentCount" parameterType="long" resultType="int">
		select count(*) from `board_comment` where post_id = #{postId}
	</select>

	<select id="commentList" resultMap="boardCommentMap">
		select * from `board_comment`
		where post_id = #{postId}
		ORDER BY created_at DESC
	</select>

	<insert id="commentInsert" parameterType="BoardCommentDTO">
		insert into `board_comment` (`post_id`,`user_id`,`content`,`created_at`) 
		values(#{postId},#{userId},#{content},now())
	</insert>
</mapper>